[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "zfit2"
authors = [
  { name = "Jonas Eschle", email = "Jonas.Eschle@cern.ch" },
]
description = "Scalable Pythonic likelihood fitting"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = ["numpy >=1.23", "scipy >=1.10", "jax"]

[project.optional-dependencies]
minuit = [
  "iminuit >=2.20",
]

test = [
  "pytest >=6",
  "pytest-cov >=3",
  "pandas >=1.5",
  "zfit2[minuit]",
]

docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]
dev = [
  "zfit2[test,docs]",
]
all = ['zfit2[test,dev,docs]']

[project.urls]
Homepage = "https://github.com/zfit/zfit2"
"Bug Tracker" = "https://github.com/zfit/zfit2/issues"
Discussions = "https://github.com/zfit/zfit2/discussions"
Changelog = "https://github.com/zfit/zfit2/releases"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/zfit2/_version.py"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["zfit2"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "zfit2.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
ignore = [
  "UP007",    # type annotation upgrade, breaks pydantic for Python 3.9 (remove once above)
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "RET505",   # This is sometimes wanted, protets against accidental intendation
  "PD901",    # "avoid using `df[...].values`" -> no, this is a very good name if there is only one df
  "PD011",    # "replace `df[...].values` with `df[...].to_numpy()`" -> not yet, it's not deprecated.
  # Prefer to have a single way to access the data if we don't care about whether it's a numpy array or not.
  "PLW0603",  # updating global variables with a function is bad, but we use it for
  "PLW2901",  # "for loop overwritten by assignment" -> we use this to update the loop variable
  "PD013",    # "melt over stack": df function, but triggers on tensors
  "NPY002",   # "Use rnd generator in numpy" -> we use np.random for some legacy stuff but do use the new one where we can
  "T201",    # "print used" -> we use print for displaying information in verbose mode

]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.10"
ignore-paths = [".*/_version.py", ".nox/"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]


# ===== Pixi Configuration =====
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.dependencies]
# Conda-specific dependencies that aren't in project.dependencies
# Note: numpy, scipy, jax are already in project.dependencies and will be installed from conda-forge
jaxlib = "*"

[tool.pixi.pypi-dependencies]
zfit2 = { path = ".", editable = true }

[tool.pixi.host-dependencies]
# Build dependencies - pixi will also read from build-system.requires
pip = "*"
setuptools = "*"
wheel = "*"

# Pixi will automatically create features from project.optional-dependencies
# We can add conda-specific dependencies to those features here
[tool.pixi.feature.test.dependencies]
# Additional conda dependencies for testing
pytest-xdist = "*"
coverage = ">=7.0"

[tool.pixi.feature.docs.dependencies]
# Additional conda dependencies for docs (if needed)

[tool.pixi.feature.lint.dependencies]
# Linting tools from conda-forge
pre-commit = "*"
ruff = ">=0.1"
mypy = "*"
pylint = "*"

[tool.pixi.feature.dev.dependencies]
# Development tools
ipython = "*"
jupyterlab = "*"
build = "*"

# Python version-specific features
[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.py313.dependencies]
python = "3.13.*"

[tool.pixi.environments]
# Default environment includes test dependencies
default = {features = ["test", "lint", "dev"], solve-group = "default"}
# Python-specific test environments
py310 = {features = ["py310", "test"], solve-group = "default"}
py311 = {features = ["py311", "test"], solve-group = "default"}
py312 = {features = ["py312", "test"], solve-group = "default"}
py313 = {features = ["py313", "test"], solve-group = "default"}
# Specialized environments
docs = {features = ["docs"], solve-group = "default"}
lint = {features = ["lint"], solve-group = "default"}

[tool.pixi.tasks]
# Testing tasks - no need for install dependency, pixi handles editable install automatically
test = "pytest tests/ -v"
test-fast = "pytest tests/ -v -x --ff"
test-ci = "pytest tests/ -s -n auto --cov=zfit2 --cov-report=xml --cov-report=term --durations=20 --timeout=3600"

# Linting tasks
pre-commit = "pre-commit run --all-files"
format = "ruff format src/ tests/"
lint = "ruff check src/ tests/"
typecheck = "mypy src/"
pylint = "pylint src/zfit2"

# Documentation tasks
docs-build = {cmd = "sphinx-build -W -b html docs docs/_build/html", cwd = "."}
docs-linkcheck = {cmd = "sphinx-build -W -b linkcheck docs docs/_build/linkcheck", cwd = "."}
docs-serve = {cmd = "python -m http.server 8000 --directory docs/_build/html", cwd = "."}

# Utility tasks
clean = "rm -rf build dist src/*.egg-info .coverage* htmlcov .pytest_cache .mypy_cache .ruff_cache"
coverage-report = "python -m coverage report && python -m coverage html"
build = "python -m build"
info = "python -c 'import zfit2; print(f\"zfit2 {zfit2.__version__} from {zfit2.__file__}\")'"
